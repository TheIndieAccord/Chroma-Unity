/* 
 * Razer REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace RazerSDK.ChromaPackage.Model
{
    /// <summary>
    /// JSON Data
    /// </summary>
    [DataContract]
    public partial class ChromaSdkInput :  IEquatable<ChromaSdkInput>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChromaSdkInput" /> class.
        /// </summary>
        /// <param name="Title">Title.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Author">Author.</param>
        /// <param name="DeviceSupported">DeviceSupported.</param>
        /// <param name="Category">Category.</param>
        public ChromaSdkInput(string Title = default(string), string Description = default(string), ChromaSdkInputAuthor Author = default(ChromaSdkInputAuthor), List<string> DeviceSupported = default(List<string>), string Category = default(string))
        {
            this.Title = Title;
            this.Description = Description;
            this.Author = Author;
            this.DeviceSupported = DeviceSupported;
            this.Category = Category;
        }
        
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title")]
		[JsonProperty(PropertyName = "title")]
        public string Title { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description")]
		[JsonProperty(PropertyName = "description")]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name="author")]
		[JsonProperty(PropertyName = "author")]
        public ChromaSdkInputAuthor Author { get; set; }
        /// <summary>
        /// Gets or Sets DeviceSupported
        /// </summary>
        [DataMember(Name="device_supported")]
		[JsonProperty(PropertyName = "device_supported")]
        public List<string> DeviceSupported { get; set; }
        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category")]
		[JsonProperty(PropertyName = "category")]
        public string Category { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChromaSdkInput {\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  DeviceSupported: ").Append(DeviceSupported).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ChromaSdkInput);
        }

        /// <summary>
        /// Returns true if ChromaSdkInput instances are equal
        /// </summary>
        /// <param name="other">Instance of ChromaSdkInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChromaSdkInput other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Author == other.Author ||
                    this.Author != null &&
                    this.Author.Equals(other.Author)
                ) && 
                (
                    this.DeviceSupported == other.DeviceSupported ||
                    this.DeviceSupported != null &&
                    this.DeviceSupported.SequenceEqual(other.DeviceSupported)
                ) && 
                (
                    this.Category == other.Category ||
                    this.Category != null &&
                    this.Category.Equals(other.Category)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.Author != null)
                    hash = hash * 59 + this.Author.GetHashCode();
                if (this.DeviceSupported != null)
                    hash = hash * 59 + this.DeviceSupported.GetHashCode();
                if (this.Category != null)
                    hash = hash * 59 + this.Category.GetHashCode();
                return hash;
            }
        }
    }

}
