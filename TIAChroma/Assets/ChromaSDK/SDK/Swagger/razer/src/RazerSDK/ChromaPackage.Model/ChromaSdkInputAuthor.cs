/* 
 * Razer REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace RazerSDK.ChromaPackage.Model
{
    /// <summary>
    /// ChromaSdkInputAuthor
    /// </summary>
    [DataContract]
    public partial class ChromaSdkInputAuthor :  IEquatable<ChromaSdkInputAuthor>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChromaSdkInputAuthor" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="Contact">Contact.</param>
        public ChromaSdkInputAuthor(string Name = default(string), string Contact = default(string))
        {
            this.Name = Name;
            this.Contact = Contact;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
		[JsonProperty(PropertyName = "name")]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Contact
        /// </summary>
        [DataMember(Name="contact")]
		[JsonProperty(PropertyName = "contact")]
        public string Contact { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChromaSdkInputAuthor {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Contact: ").Append(Contact).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ChromaSdkInputAuthor);
        }

        /// <summary>
        /// Returns true if ChromaSdkInputAuthor instances are equal
        /// </summary>
        /// <param name="other">Instance of ChromaSdkInputAuthor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChromaSdkInputAuthor other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Contact == other.Contact ||
                    this.Contact != null &&
                    this.Contact.Equals(other.Contact)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Contact != null)
                    hash = hash * 59 + this.Contact.GetHashCode();
                return hash;
            }
        }
    }

}
